// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/18/2024 14:55:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    3156lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 3156lab3_vlg_sample_tst(
	clk,
	resetBar,
	sampler_tx
);
input  clk;
input  resetBar;
output sampler_tx;

reg sample;
time current_time;
always @(clk or resetBar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 3156lab3_vlg_check_tst (
	ALUResult,
	Branch,
	ControlSignals,
	Instruction,
	MemWrite,
	PC,
	ReadData1,
	ReadData2,
	RegWrite,
	WriteData,
	Zero,
	sampler_rx
);
input [7:0] ALUResult;
input  Branch;
input [7:0] ControlSignals;
input [31:0] Instruction;
input  MemWrite;
input [7:0] PC;
input [7:0] ReadData1;
input [7:0] ReadData2;
input  RegWrite;
input [7:0] WriteData;
input  Zero;
input sampler_rx;

reg [7:0] ALUResult_expected;
reg  Branch_expected;
reg [7:0] ControlSignals_expected;
reg [31:0] Instruction_expected;
reg  MemWrite_expected;
reg [7:0] PC_expected;
reg [7:0] ReadData1_expected;
reg [7:0] ReadData2_expected;
reg  RegWrite_expected;
reg [7:0] WriteData_expected;
reg  Zero_expected;

reg [7:0] ALUResult_prev;
reg  Branch_prev;
reg [7:0] ControlSignals_prev;
reg [31:0] Instruction_prev;
reg  MemWrite_prev;
reg [7:0] PC_prev;
reg [7:0] ReadData1_prev;
reg [7:0] ReadData2_prev;
reg  RegWrite_prev;
reg [7:0] WriteData_prev;
reg  Zero_prev;

reg [7:0] ALUResult_expected_prev;
reg  Branch_expected_prev;
reg [7:0] ControlSignals_expected_prev;
reg [31:0] Instruction_expected_prev;
reg  MemWrite_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] ReadData1_expected_prev;
reg [7:0] ReadData2_expected_prev;
reg  RegWrite_expected_prev;
reg [7:0] WriteData_expected_prev;
reg  Zero_expected_prev;

reg [7:0] last_ALUResult_exp;
reg  last_Branch_exp;
reg [7:0] last_ControlSignals_exp;
reg [31:0] last_Instruction_exp;
reg  last_MemWrite_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_ReadData1_exp;
reg [7:0] last_ReadData2_exp;
reg  last_RegWrite_exp;
reg [7:0] last_WriteData_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUResult_prev = ALUResult;
	Branch_prev = Branch;
	ControlSignals_prev = ControlSignals;
	Instruction_prev = Instruction;
	MemWrite_prev = MemWrite;
	PC_prev = PC;
	ReadData1_prev = ReadData1;
	ReadData2_prev = ReadData2;
	RegWrite_prev = RegWrite;
	WriteData_prev = WriteData;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALUResult_expected_prev = ALUResult_expected;
	Branch_expected_prev = Branch_expected;
	ControlSignals_expected_prev = ControlSignals_expected;
	Instruction_expected_prev = Instruction_expected;
	MemWrite_expected_prev = MemWrite_expected;
	PC_expected_prev = PC_expected;
	ReadData1_expected_prev = ReadData1_expected;
	ReadData2_expected_prev = ReadData2_expected;
	RegWrite_expected_prev = RegWrite_expected;
	WriteData_expected_prev = WriteData_expected;
	Zero_expected_prev = Zero_expected;
end


// expected ALUResult[ 7 ]
initial
begin
	ALUResult_expected[7] = 1'bX;
end 
// expected ALUResult[ 6 ]
initial
begin
	ALUResult_expected[6] = 1'bX;
end 
// expected ALUResult[ 5 ]
initial
begin
	ALUResult_expected[5] = 1'bX;
end 
// expected ALUResult[ 4 ]
initial
begin
	ALUResult_expected[4] = 1'bX;
end 
// expected ALUResult[ 3 ]
initial
begin
	ALUResult_expected[3] = 1'bX;
end 
// expected ALUResult[ 2 ]
initial
begin
	ALUResult_expected[2] = 1'bX;
end 
// expected ALUResult[ 1 ]
initial
begin
	ALUResult_expected[1] = 1'bX;
end 
// expected ALUResult[ 0 ]
initial
begin
	ALUResult_expected[0] = 1'bX;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
end 
// expected ControlSignals[ 7 ]
initial
begin
	ControlSignals_expected[7] = 1'bX;
end 
// expected ControlSignals[ 6 ]
initial
begin
	ControlSignals_expected[6] = 1'bX;
end 
// expected ControlSignals[ 5 ]
initial
begin
	ControlSignals_expected[5] = 1'bX;
end 
// expected ControlSignals[ 4 ]
initial
begin
	ControlSignals_expected[4] = 1'bX;
end 
// expected ControlSignals[ 3 ]
initial
begin
	ControlSignals_expected[3] = 1'bX;
end 
// expected ControlSignals[ 2 ]
initial
begin
	ControlSignals_expected[2] = 1'bX;
end 
// expected ControlSignals[ 1 ]
initial
begin
	ControlSignals_expected[1] = 1'bX;
end 
// expected ControlSignals[ 0 ]
initial
begin
	ControlSignals_expected[0] = 1'bX;
end 
// expected Instruction[ 31 ]
initial
begin
	Instruction_expected[31] = 1'bX;
end 
// expected Instruction[ 30 ]
initial
begin
	Instruction_expected[30] = 1'bX;
end 
// expected Instruction[ 29 ]
initial
begin
	Instruction_expected[29] = 1'bX;
end 
// expected Instruction[ 28 ]
initial
begin
	Instruction_expected[28] = 1'bX;
end 
// expected Instruction[ 27 ]
initial
begin
	Instruction_expected[27] = 1'bX;
end 
// expected Instruction[ 26 ]
initial
begin
	Instruction_expected[26] = 1'bX;
end 
// expected Instruction[ 25 ]
initial
begin
	Instruction_expected[25] = 1'bX;
end 
// expected Instruction[ 24 ]
initial
begin
	Instruction_expected[24] = 1'bX;
end 
// expected Instruction[ 23 ]
initial
begin
	Instruction_expected[23] = 1'bX;
end 
// expected Instruction[ 22 ]
initial
begin
	Instruction_expected[22] = 1'bX;
end 
// expected Instruction[ 21 ]
initial
begin
	Instruction_expected[21] = 1'bX;
end 
// expected Instruction[ 20 ]
initial
begin
	Instruction_expected[20] = 1'bX;
end 
// expected Instruction[ 19 ]
initial
begin
	Instruction_expected[19] = 1'bX;
end 
// expected Instruction[ 18 ]
initial
begin
	Instruction_expected[18] = 1'bX;
end 
// expected Instruction[ 17 ]
initial
begin
	Instruction_expected[17] = 1'bX;
end 
// expected Instruction[ 16 ]
initial
begin
	Instruction_expected[16] = 1'bX;
end 
// expected Instruction[ 15 ]
initial
begin
	Instruction_expected[15] = 1'bX;
end 
// expected Instruction[ 14 ]
initial
begin
	Instruction_expected[14] = 1'bX;
end 
// expected Instruction[ 13 ]
initial
begin
	Instruction_expected[13] = 1'bX;
end 
// expected Instruction[ 12 ]
initial
begin
	Instruction_expected[12] = 1'bX;
end 
// expected Instruction[ 11 ]
initial
begin
	Instruction_expected[11] = 1'bX;
end 
// expected Instruction[ 10 ]
initial
begin
	Instruction_expected[10] = 1'bX;
end 
// expected Instruction[ 9 ]
initial
begin
	Instruction_expected[9] = 1'bX;
end 
// expected Instruction[ 8 ]
initial
begin
	Instruction_expected[8] = 1'bX;
end 
// expected Instruction[ 7 ]
initial
begin
	Instruction_expected[7] = 1'bX;
end 
// expected Instruction[ 6 ]
initial
begin
	Instruction_expected[6] = 1'bX;
end 
// expected Instruction[ 5 ]
initial
begin
	Instruction_expected[5] = 1'bX;
end 
// expected Instruction[ 4 ]
initial
begin
	Instruction_expected[4] = 1'bX;
end 
// expected Instruction[ 3 ]
initial
begin
	Instruction_expected[3] = 1'bX;
end 
// expected Instruction[ 2 ]
initial
begin
	Instruction_expected[2] = 1'bX;
end 
// expected Instruction[ 1 ]
initial
begin
	Instruction_expected[1] = 1'bX;
end 
// expected Instruction[ 0 ]
initial
begin
	Instruction_expected[0] = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected ReadData1[ 7 ]
initial
begin
	ReadData1_expected[7] = 1'bX;
end 
// expected ReadData1[ 6 ]
initial
begin
	ReadData1_expected[6] = 1'bX;
end 
// expected ReadData1[ 5 ]
initial
begin
	ReadData1_expected[5] = 1'bX;
end 
// expected ReadData1[ 4 ]
initial
begin
	ReadData1_expected[4] = 1'bX;
end 
// expected ReadData1[ 3 ]
initial
begin
	ReadData1_expected[3] = 1'bX;
end 
// expected ReadData1[ 2 ]
initial
begin
	ReadData1_expected[2] = 1'bX;
end 
// expected ReadData1[ 1 ]
initial
begin
	ReadData1_expected[1] = 1'bX;
end 
// expected ReadData1[ 0 ]
initial
begin
	ReadData1_expected[0] = 1'bX;
end 
// expected ReadData2[ 7 ]
initial
begin
	ReadData2_expected[7] = 1'bX;
end 
// expected ReadData2[ 6 ]
initial
begin
	ReadData2_expected[6] = 1'bX;
end 
// expected ReadData2[ 5 ]
initial
begin
	ReadData2_expected[5] = 1'bX;
end 
// expected ReadData2[ 4 ]
initial
begin
	ReadData2_expected[4] = 1'bX;
end 
// expected ReadData2[ 3 ]
initial
begin
	ReadData2_expected[3] = 1'bX;
end 
// expected ReadData2[ 2 ]
initial
begin
	ReadData2_expected[2] = 1'bX;
end 
// expected ReadData2[ 1 ]
initial
begin
	ReadData2_expected[1] = 1'bX;
end 
// expected ReadData2[ 0 ]
initial
begin
	ReadData2_expected[0] = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 
// expected WriteData[ 7 ]
initial
begin
	WriteData_expected[7] = 1'bX;
end 
// expected WriteData[ 6 ]
initial
begin
	WriteData_expected[6] = 1'bX;
end 
// expected WriteData[ 5 ]
initial
begin
	WriteData_expected[5] = 1'bX;
end 
// expected WriteData[ 4 ]
initial
begin
	WriteData_expected[4] = 1'bX;
end 
// expected WriteData[ 3 ]
initial
begin
	WriteData_expected[3] = 1'bX;
end 
// expected WriteData[ 2 ]
initial
begin
	WriteData_expected[2] = 1'bX;
end 
// expected WriteData[ 1 ]
initial
begin
	WriteData_expected[1] = 1'bX;
end 
// expected WriteData[ 0 ]
initial
begin
	WriteData_expected[0] = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
end 
// generate trigger
always @(ALUResult_expected or ALUResult or Branch_expected or Branch or ControlSignals_expected or ControlSignals or Instruction_expected or Instruction or MemWrite_expected or MemWrite or PC_expected or PC or ReadData1_expected or ReadData1 or ReadData2_expected or ReadData2 or RegWrite_expected or RegWrite or WriteData_expected or WriteData or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUResult = %b | expected Branch = %b | expected ControlSignals = %b | expected Instruction = %b | expected MemWrite = %b | expected PC = %b | expected ReadData1 = %b | expected ReadData2 = %b | expected RegWrite = %b | expected WriteData = %b | expected Zero = %b | ",ALUResult_expected_prev,Branch_expected_prev,ControlSignals_expected_prev,Instruction_expected_prev,MemWrite_expected_prev,PC_expected_prev,ReadData1_expected_prev,ReadData2_expected_prev,RegWrite_expected_prev,WriteData_expected_prev,Zero_expected_prev);
	$display("| real ALUResult = %b | real Branch = %b | real ControlSignals = %b | real Instruction = %b | real MemWrite = %b | real PC = %b | real ReadData1 = %b | real ReadData2 = %b | real RegWrite = %b | real WriteData = %b | real Zero = %b | ",ALUResult_prev,Branch_prev,ControlSignals_prev,Instruction_prev,MemWrite_prev,PC_prev,ReadData1_prev,ReadData2_prev,RegWrite_prev,WriteData_prev,Zero_prev);
`endif
	if (
		( ALUResult_expected_prev[0] !== 1'bx ) && ( ALUResult_prev[0] !== ALUResult_expected_prev[0] )
		&& ((ALUResult_expected_prev[0] !== last_ALUResult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[0] = ALUResult_expected_prev[0];
	end
	if (
		( ALUResult_expected_prev[1] !== 1'bx ) && ( ALUResult_prev[1] !== ALUResult_expected_prev[1] )
		&& ((ALUResult_expected_prev[1] !== last_ALUResult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[1] = ALUResult_expected_prev[1];
	end
	if (
		( ALUResult_expected_prev[2] !== 1'bx ) && ( ALUResult_prev[2] !== ALUResult_expected_prev[2] )
		&& ((ALUResult_expected_prev[2] !== last_ALUResult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[2] = ALUResult_expected_prev[2];
	end
	if (
		( ALUResult_expected_prev[3] !== 1'bx ) && ( ALUResult_prev[3] !== ALUResult_expected_prev[3] )
		&& ((ALUResult_expected_prev[3] !== last_ALUResult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[3] = ALUResult_expected_prev[3];
	end
	if (
		( ALUResult_expected_prev[4] !== 1'bx ) && ( ALUResult_prev[4] !== ALUResult_expected_prev[4] )
		&& ((ALUResult_expected_prev[4] !== last_ALUResult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[4] = ALUResult_expected_prev[4];
	end
	if (
		( ALUResult_expected_prev[5] !== 1'bx ) && ( ALUResult_prev[5] !== ALUResult_expected_prev[5] )
		&& ((ALUResult_expected_prev[5] !== last_ALUResult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[5] = ALUResult_expected_prev[5];
	end
	if (
		( ALUResult_expected_prev[6] !== 1'bx ) && ( ALUResult_prev[6] !== ALUResult_expected_prev[6] )
		&& ((ALUResult_expected_prev[6] !== last_ALUResult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[6] = ALUResult_expected_prev[6];
	end
	if (
		( ALUResult_expected_prev[7] !== 1'bx ) && ( ALUResult_prev[7] !== ALUResult_expected_prev[7] )
		&& ((ALUResult_expected_prev[7] !== last_ALUResult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[7] = ALUResult_expected_prev[7];
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( ControlSignals_expected_prev[0] !== 1'bx ) && ( ControlSignals_prev[0] !== ControlSignals_expected_prev[0] )
		&& ((ControlSignals_expected_prev[0] !== last_ControlSignals_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[0] = ControlSignals_expected_prev[0];
	end
	if (
		( ControlSignals_expected_prev[1] !== 1'bx ) && ( ControlSignals_prev[1] !== ControlSignals_expected_prev[1] )
		&& ((ControlSignals_expected_prev[1] !== last_ControlSignals_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[1] = ControlSignals_expected_prev[1];
	end
	if (
		( ControlSignals_expected_prev[2] !== 1'bx ) && ( ControlSignals_prev[2] !== ControlSignals_expected_prev[2] )
		&& ((ControlSignals_expected_prev[2] !== last_ControlSignals_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[2] = ControlSignals_expected_prev[2];
	end
	if (
		( ControlSignals_expected_prev[3] !== 1'bx ) && ( ControlSignals_prev[3] !== ControlSignals_expected_prev[3] )
		&& ((ControlSignals_expected_prev[3] !== last_ControlSignals_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[3] = ControlSignals_expected_prev[3];
	end
	if (
		( ControlSignals_expected_prev[4] !== 1'bx ) && ( ControlSignals_prev[4] !== ControlSignals_expected_prev[4] )
		&& ((ControlSignals_expected_prev[4] !== last_ControlSignals_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[4] = ControlSignals_expected_prev[4];
	end
	if (
		( ControlSignals_expected_prev[5] !== 1'bx ) && ( ControlSignals_prev[5] !== ControlSignals_expected_prev[5] )
		&& ((ControlSignals_expected_prev[5] !== last_ControlSignals_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[5] = ControlSignals_expected_prev[5];
	end
	if (
		( ControlSignals_expected_prev[6] !== 1'bx ) && ( ControlSignals_prev[6] !== ControlSignals_expected_prev[6] )
		&& ((ControlSignals_expected_prev[6] !== last_ControlSignals_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[6] = ControlSignals_expected_prev[6];
	end
	if (
		( ControlSignals_expected_prev[7] !== 1'bx ) && ( ControlSignals_prev[7] !== ControlSignals_expected_prev[7] )
		&& ((ControlSignals_expected_prev[7] !== last_ControlSignals_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ControlSignals[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ControlSignals_expected_prev);
		$display ("     Real value = %b", ControlSignals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ControlSignals_exp[7] = ControlSignals_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[0] !== 1'bx ) && ( Instruction_prev[0] !== Instruction_expected_prev[0] )
		&& ((Instruction_expected_prev[0] !== last_Instruction_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[0] = Instruction_expected_prev[0];
	end
	if (
		( Instruction_expected_prev[1] !== 1'bx ) && ( Instruction_prev[1] !== Instruction_expected_prev[1] )
		&& ((Instruction_expected_prev[1] !== last_Instruction_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[1] = Instruction_expected_prev[1];
	end
	if (
		( Instruction_expected_prev[2] !== 1'bx ) && ( Instruction_prev[2] !== Instruction_expected_prev[2] )
		&& ((Instruction_expected_prev[2] !== last_Instruction_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[2] = Instruction_expected_prev[2];
	end
	if (
		( Instruction_expected_prev[3] !== 1'bx ) && ( Instruction_prev[3] !== Instruction_expected_prev[3] )
		&& ((Instruction_expected_prev[3] !== last_Instruction_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[3] = Instruction_expected_prev[3];
	end
	if (
		( Instruction_expected_prev[4] !== 1'bx ) && ( Instruction_prev[4] !== Instruction_expected_prev[4] )
		&& ((Instruction_expected_prev[4] !== last_Instruction_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[4] = Instruction_expected_prev[4];
	end
	if (
		( Instruction_expected_prev[5] !== 1'bx ) && ( Instruction_prev[5] !== Instruction_expected_prev[5] )
		&& ((Instruction_expected_prev[5] !== last_Instruction_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[5] = Instruction_expected_prev[5];
	end
	if (
		( Instruction_expected_prev[6] !== 1'bx ) && ( Instruction_prev[6] !== Instruction_expected_prev[6] )
		&& ((Instruction_expected_prev[6] !== last_Instruction_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[6] = Instruction_expected_prev[6];
	end
	if (
		( Instruction_expected_prev[7] !== 1'bx ) && ( Instruction_prev[7] !== Instruction_expected_prev[7] )
		&& ((Instruction_expected_prev[7] !== last_Instruction_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[7] = Instruction_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[8] !== 1'bx ) && ( Instruction_prev[8] !== Instruction_expected_prev[8] )
		&& ((Instruction_expected_prev[8] !== last_Instruction_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[8] = Instruction_expected_prev[8];
	end
	if (
		( Instruction_expected_prev[9] !== 1'bx ) && ( Instruction_prev[9] !== Instruction_expected_prev[9] )
		&& ((Instruction_expected_prev[9] !== last_Instruction_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[9] = Instruction_expected_prev[9];
	end
	if (
		( Instruction_expected_prev[10] !== 1'bx ) && ( Instruction_prev[10] !== Instruction_expected_prev[10] )
		&& ((Instruction_expected_prev[10] !== last_Instruction_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[10] = Instruction_expected_prev[10];
	end
	if (
		( Instruction_expected_prev[11] !== 1'bx ) && ( Instruction_prev[11] !== Instruction_expected_prev[11] )
		&& ((Instruction_expected_prev[11] !== last_Instruction_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[11] = Instruction_expected_prev[11];
	end
	if (
		( Instruction_expected_prev[12] !== 1'bx ) && ( Instruction_prev[12] !== Instruction_expected_prev[12] )
		&& ((Instruction_expected_prev[12] !== last_Instruction_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[12] = Instruction_expected_prev[12];
	end
	if (
		( Instruction_expected_prev[13] !== 1'bx ) && ( Instruction_prev[13] !== Instruction_expected_prev[13] )
		&& ((Instruction_expected_prev[13] !== last_Instruction_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[13] = Instruction_expected_prev[13];
	end
	if (
		( Instruction_expected_prev[14] !== 1'bx ) && ( Instruction_prev[14] !== Instruction_expected_prev[14] )
		&& ((Instruction_expected_prev[14] !== last_Instruction_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[14] = Instruction_expected_prev[14];
	end
	if (
		( Instruction_expected_prev[15] !== 1'bx ) && ( Instruction_prev[15] !== Instruction_expected_prev[15] )
		&& ((Instruction_expected_prev[15] !== last_Instruction_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[15] = Instruction_expected_prev[15];
	end
	if (
		( Instruction_expected_prev[16] !== 1'bx ) && ( Instruction_prev[16] !== Instruction_expected_prev[16] )
		&& ((Instruction_expected_prev[16] !== last_Instruction_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[16] = Instruction_expected_prev[16];
	end
	if (
		( Instruction_expected_prev[17] !== 1'bx ) && ( Instruction_prev[17] !== Instruction_expected_prev[17] )
		&& ((Instruction_expected_prev[17] !== last_Instruction_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[17] = Instruction_expected_prev[17];
	end
	if (
		( Instruction_expected_prev[18] !== 1'bx ) && ( Instruction_prev[18] !== Instruction_expected_prev[18] )
		&& ((Instruction_expected_prev[18] !== last_Instruction_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[18] = Instruction_expected_prev[18];
	end
	if (
		( Instruction_expected_prev[19] !== 1'bx ) && ( Instruction_prev[19] !== Instruction_expected_prev[19] )
		&& ((Instruction_expected_prev[19] !== last_Instruction_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[19] = Instruction_expected_prev[19];
	end
	if (
		( Instruction_expected_prev[20] !== 1'bx ) && ( Instruction_prev[20] !== Instruction_expected_prev[20] )
		&& ((Instruction_expected_prev[20] !== last_Instruction_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[20] = Instruction_expected_prev[20];
	end
	if (
		( Instruction_expected_prev[21] !== 1'bx ) && ( Instruction_prev[21] !== Instruction_expected_prev[21] )
		&& ((Instruction_expected_prev[21] !== last_Instruction_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[21] = Instruction_expected_prev[21];
	end
	if (
		( Instruction_expected_prev[22] !== 1'bx ) && ( Instruction_prev[22] !== Instruction_expected_prev[22] )
		&& ((Instruction_expected_prev[22] !== last_Instruction_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[22] = Instruction_expected_prev[22];
	end
	if (
		( Instruction_expected_prev[23] !== 1'bx ) && ( Instruction_prev[23] !== Instruction_expected_prev[23] )
		&& ((Instruction_expected_prev[23] !== last_Instruction_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[23] = Instruction_expected_prev[23];
	end
	if (
		( Instruction_expected_prev[24] !== 1'bx ) && ( Instruction_prev[24] !== Instruction_expected_prev[24] )
		&& ((Instruction_expected_prev[24] !== last_Instruction_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[24] = Instruction_expected_prev[24];
	end
	if (
		( Instruction_expected_prev[25] !== 1'bx ) && ( Instruction_prev[25] !== Instruction_expected_prev[25] )
		&& ((Instruction_expected_prev[25] !== last_Instruction_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[25] = Instruction_expected_prev[25];
	end
	if (
		( Instruction_expected_prev[26] !== 1'bx ) && ( Instruction_prev[26] !== Instruction_expected_prev[26] )
		&& ((Instruction_expected_prev[26] !== last_Instruction_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[26] = Instruction_expected_prev[26];
	end
	if (
		( Instruction_expected_prev[27] !== 1'bx ) && ( Instruction_prev[27] !== Instruction_expected_prev[27] )
		&& ((Instruction_expected_prev[27] !== last_Instruction_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[27] = Instruction_expected_prev[27];
	end
	if (
		( Instruction_expected_prev[28] !== 1'bx ) && ( Instruction_prev[28] !== Instruction_expected_prev[28] )
		&& ((Instruction_expected_prev[28] !== last_Instruction_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[28] = Instruction_expected_prev[28];
	end
	if (
		( Instruction_expected_prev[29] !== 1'bx ) && ( Instruction_prev[29] !== Instruction_expected_prev[29] )
		&& ((Instruction_expected_prev[29] !== last_Instruction_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[29] = Instruction_expected_prev[29];
	end
	if (
		( Instruction_expected_prev[30] !== 1'bx ) && ( Instruction_prev[30] !== Instruction_expected_prev[30] )
		&& ((Instruction_expected_prev[30] !== last_Instruction_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[30] = Instruction_expected_prev[30];
	end
	if (
		( Instruction_expected_prev[31] !== 1'bx ) && ( Instruction_prev[31] !== Instruction_expected_prev[31] )
		&& ((Instruction_expected_prev[31] !== last_Instruction_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_exp[31] = Instruction_expected_prev[31];
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( ReadData1_expected_prev[0] !== 1'bx ) && ( ReadData1_prev[0] !== ReadData1_expected_prev[0] )
		&& ((ReadData1_expected_prev[0] !== last_ReadData1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[0] = ReadData1_expected_prev[0];
	end
	if (
		( ReadData1_expected_prev[1] !== 1'bx ) && ( ReadData1_prev[1] !== ReadData1_expected_prev[1] )
		&& ((ReadData1_expected_prev[1] !== last_ReadData1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[1] = ReadData1_expected_prev[1];
	end
	if (
		( ReadData1_expected_prev[2] !== 1'bx ) && ( ReadData1_prev[2] !== ReadData1_expected_prev[2] )
		&& ((ReadData1_expected_prev[2] !== last_ReadData1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[2] = ReadData1_expected_prev[2];
	end
	if (
		( ReadData1_expected_prev[3] !== 1'bx ) && ( ReadData1_prev[3] !== ReadData1_expected_prev[3] )
		&& ((ReadData1_expected_prev[3] !== last_ReadData1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[3] = ReadData1_expected_prev[3];
	end
	if (
		( ReadData1_expected_prev[4] !== 1'bx ) && ( ReadData1_prev[4] !== ReadData1_expected_prev[4] )
		&& ((ReadData1_expected_prev[4] !== last_ReadData1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[4] = ReadData1_expected_prev[4];
	end
	if (
		( ReadData1_expected_prev[5] !== 1'bx ) && ( ReadData1_prev[5] !== ReadData1_expected_prev[5] )
		&& ((ReadData1_expected_prev[5] !== last_ReadData1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[5] = ReadData1_expected_prev[5];
	end
	if (
		( ReadData1_expected_prev[6] !== 1'bx ) && ( ReadData1_prev[6] !== ReadData1_expected_prev[6] )
		&& ((ReadData1_expected_prev[6] !== last_ReadData1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[6] = ReadData1_expected_prev[6];
	end
	if (
		( ReadData1_expected_prev[7] !== 1'bx ) && ( ReadData1_prev[7] !== ReadData1_expected_prev[7] )
		&& ((ReadData1_expected_prev[7] !== last_ReadData1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ReadData1_exp[7] = ReadData1_expected_prev[7];
	end
	if (
		( ReadData2_expected_prev[0] !== 1'bx ) && ( ReadData2_prev[0] !== ReadData2_expected_prev[0] )
		&& ((ReadData2_expected_prev[0] !== last_ReadData2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[0] = ReadData2_expected_prev[0];
	end
	if (
		( ReadData2_expected_prev[1] !== 1'bx ) && ( ReadData2_prev[1] !== ReadData2_expected_prev[1] )
		&& ((ReadData2_expected_prev[1] !== last_ReadData2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[1] = ReadData2_expected_prev[1];
	end
	if (
		( ReadData2_expected_prev[2] !== 1'bx ) && ( ReadData2_prev[2] !== ReadData2_expected_prev[2] )
		&& ((ReadData2_expected_prev[2] !== last_ReadData2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[2] = ReadData2_expected_prev[2];
	end
	if (
		( ReadData2_expected_prev[3] !== 1'bx ) && ( ReadData2_prev[3] !== ReadData2_expected_prev[3] )
		&& ((ReadData2_expected_prev[3] !== last_ReadData2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[3] = ReadData2_expected_prev[3];
	end
	if (
		( ReadData2_expected_prev[4] !== 1'bx ) && ( ReadData2_prev[4] !== ReadData2_expected_prev[4] )
		&& ((ReadData2_expected_prev[4] !== last_ReadData2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[4] = ReadData2_expected_prev[4];
	end
	if (
		( ReadData2_expected_prev[5] !== 1'bx ) && ( ReadData2_prev[5] !== ReadData2_expected_prev[5] )
		&& ((ReadData2_expected_prev[5] !== last_ReadData2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[5] = ReadData2_expected_prev[5];
	end
	if (
		( ReadData2_expected_prev[6] !== 1'bx ) && ( ReadData2_prev[6] !== ReadData2_expected_prev[6] )
		&& ((ReadData2_expected_prev[6] !== last_ReadData2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[6] = ReadData2_expected_prev[6];
	end
	if (
		( ReadData2_expected_prev[7] !== 1'bx ) && ( ReadData2_prev[7] !== ReadData2_expected_prev[7] )
		&& ((ReadData2_expected_prev[7] !== last_ReadData2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData2_expected_prev);
		$display ("     Real value = %b", ReadData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ReadData2_exp[7] = ReadData2_expected_prev[7];
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 3156lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg resetBar;
// wires                                               
wire [7:0] ALUResult;
wire Branch;
wire [7:0] ControlSignals;
wire [31:0] Instruction;
wire MemWrite;
wire [7:0] PC;
wire [7:0] ReadData1;
wire [7:0] ReadData2;
wire RegWrite;
wire [7:0] WriteData;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
3156lab3 i1 (
// port map - connection between master ports and signals/registers   
	.ALUResult(ALUResult),
	.Branch(Branch),
	.clk(clk),
	.ControlSignals(ControlSignals),
	.Instruction(Instruction),
	.MemWrite(MemWrite),
	.PC(PC),
	.ReadData1(ReadData1),
	.ReadData2(ReadData2),
	.RegWrite(RegWrite),
	.resetBar(resetBar),
	.WriteData(WriteData),
	.Zero(Zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// resetBar
initial
begin
	resetBar = 1'b1;
end 

3156lab3_vlg_sample_tst tb_sample (
	.clk(clk),
	.resetBar(resetBar),
	.sampler_tx(sampler)
);

3156lab3_vlg_check_tst tb_out(
	.ALUResult(ALUResult),
	.Branch(Branch),
	.ControlSignals(ControlSignals),
	.Instruction(Instruction),
	.MemWrite(MemWrite),
	.PC(PC),
	.ReadData1(ReadData1),
	.ReadData2(ReadData2),
	.RegWrite(RegWrite),
	.WriteData(WriteData),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

